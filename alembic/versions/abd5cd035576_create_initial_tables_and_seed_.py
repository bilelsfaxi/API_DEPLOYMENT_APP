"""create initial tables and seed reference videos

Revision ID: abd5cd035576
Revises:
Create Date: 2025-08-28 17:07:03.706982

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import TIMESTAMP


# revision identifiers, used by Alembic.
revision: str = 'abd5cd035576'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    posture_enum = sa.Enum('assis', 'debout', 'a_quatre_pattes', name='postureenum')
    posture_enum.create(op.get_bind(), checkfirst=False)

    # Dogs table
    op.create_table('dogs',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.Text(), nullable=False),
        sa.Column('breed', sa.Text(), nullable=True),
        sa.Column('owner_name', sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )

    # Reference Posture Videos table
    ref_videos_table = op.create_table('reference_posture_videos',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('posture', sa.Enum('assis', 'debout', 'a_quatre_pattes', name='postureenum'), nullable=False),
        sa.Column('video_path', sa.Text(), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )

    # Seed the reference videos
    op.bulk_insert(ref_videos_table, [
        {'posture': 'assis', 'video_path': '/static/videos/assis_1.mp4', 'description': 'Vidéo de référence pour la posture assise, angle 1.'},
        {'posture': 'assis', 'video_path': '/static/videos/assis_2.mp4', 'description': 'Vidéo de référence pour la posture assise, angle 2.'},
        {'posture': 'assis', 'video_path': '/static/videos/assis_3.mp4', 'description': 'Vidéo de référence pour la posture assise, angle 3.'},
        {'posture': 'assis', 'video_path': '/static/videos/assis_4.mp4', 'description': 'Vidéo de référence pour la posture assise, angle 4.'},
        {'posture': 'debout', 'video_path': '/static/videos/debout_1.mp4', 'description': 'Vidéo de référence pour la posture debout, angle 1.'},
        {'posture': 'debout', 'video_path': '/static/videos/debout_2.mp4', 'description': 'Vidéo de référence pour la posture debout, angle 2.'},
        {'posture': 'debout', 'video_path': '/static/videos/debout_3.mp4', 'description': 'Vidéo de référence pour la posture debout, angle 3.'},
        {'posture': 'debout', 'video_path': '/static/videos/debout_4.mp4', 'description': 'Vidéo de référence pour la posture debout, angle 4.'},
        {'posture': 'a_quatre_pattes', 'video_path': '/static/videos/a_quatre_pattes_1.mp4', 'description': 'Vidéo de référence pour à quatre pattes, angle 1.'},
        {'posture': 'a_quatre_pattes', 'video_path': '/static/videos/a_quatre_pattes_2.mp4', 'description': 'Vidéo de référence pour à quatre pattes, angle 2.'},
        {'posture': 'a_quatre_pattes', 'video_path': '/static/videos/a_quatre_pattes_3.mp4', 'description': 'Vidéo de référence pour à quatre pattes, angle 3.'},
        {'posture': 'a_quatre_pattes', 'video_path': '/static/videos/a_quatre_pattes_4.mp4', 'description': 'Vidéo de référence pour à quatre pattes, angle 4.'},
    ])

    # Video Sessions table
    op.create_table('video_sessions',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('dog_id', sa.Integer(), nullable=False),
        sa.Column('posture', sa.Enum('assis', 'debout', 'a_quatre_pattes', name='postureenum'), nullable=False),
        sa.Column('session_start', TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('session_end', TIMESTAMP(timezone=True), nullable=True),
        sa.Column('total_frames_processed', sa.Integer(), nullable=True),
        sa.Column('success_detected', sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(['dog_id'], ['dogs.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    # Posture Detection Results table
    op.create_table('posture_detection_results',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('session_id', sa.Integer(), nullable=False),
        sa.Column('video_id', sa.Integer(), nullable=False),
        sa.Column('posture', sa.Enum('assis', 'debout', 'a_quatre_pattes', name='postureenum'), nullable=False),
        sa.Column('confidence', sa.Float(), nullable=False),
        sa.Column('result', sa.Text(), nullable=False),
        sa.Column('timestamp', TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['session_id'], ['video_sessions.id'], ),
        sa.ForeignKeyConstraint(['video_id'], ['reference_posture_videos.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    # Validated Postures table
    op.create_table('validated_postures',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('dog_id', sa.Integer(), nullable=False),
        sa.Column('posture', sa.Enum('assis', 'debout', 'a_quatre_pattes', name='postureenum'), nullable=False),
        sa.Column('validated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.ForeignKeyConstraint(['dog_id'], ['dogs.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('validated_postures')
    op.drop_table('posture_detection_results')
    op.drop_table('video_sessions')
    op.drop_table('reference_posture_videos')
    op.drop_table('dogs')
    sa.Enum(name='postureenum').drop(op.get_bind(), checkfirst=False)
    # ### end Alembic commands ###
